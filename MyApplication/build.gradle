plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'scala'
	id 'io.gatling.gradle' version '3.13.1' 
	id 'org.openapi.generator' version '6.3.0' 
	//id 'au.com.dius.pact' version '4.5.10'
	
}
 

group = 'com.demo.task'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
	set('springCloudVersion', "2024.0.0-RC1")
}


dependencies {

	
	testImplementation 'au.com.dius.pact.consumer:junit5:4.5.8'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
	//implementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner'
//	testImplementation 'au.com.dius.pact.consumer:junit5:4.5.9'  // Consumer contract testing for JUnit 5
	//implementation 'au.com.dius.pact.provider:junit5:4.5.9'  // Provider contract testing for JUnit 5
	//implementation 'au.com.dius.pact.consumer:mockmvc:4.5.9'  // Pact mockmvc for consumer tests
	//implementation 'au.com.dius.pact.core:pact-core-model:4.5.9'
    //testImplementation 'org.springframework.boot:spring-boot-starter-test'
    
    //implementation 'au.com.dius.pact.consumer:pact-consumer-junit5:4.3.9' // Pact JUnit 5 support
    //implementation 'au.com.dius.pact.core:pact-core-model:4.3.9'  // Core Pact library
   // implementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    //testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    //testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0' 

	//swagger and CodeGenAi
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'  // Latest Springdoc OpenAPI version
     //implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'

	

	//Gatling with scala
	implementation 'io.gatling:gatling-core:3.13.1'   // Core Gatling library
    implementation 'io.gatling:gatling-http:3.13.1'   // HTTP module for Gatling
    implementation 'io.gatling.highcharts:gatling-charts-highcharts:3.13.1'  // Highcharts for Gatling results
    implementation 'org.scala-lang:scala-library:2.13.15'  // Scala library dependency
    testImplementation 'org.scala-js:scalajs-test-bridge_2.13:1.17.0'
    implementation  'com.typesafe:config:1.3.1'


	
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	
	testImplementation "org.wiremock:wiremock:3.10.0"
	
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
 	
 	//circuit breaker
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.0.2'
 
    

	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'com.h2database:h2:2.2.220'
	
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
}


dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

task generateOpenApiCode(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    group = "build"   
     description = "Generates Java code from OpenAPI specification"
   generatorName = "spring"  // Specify 'spring' for Spring Boot code generation
   inputSpec = "$rootDir/api1-docs.yaml"  // Path to your OpenAPI YAML file
   outputDir = "$buildDir/generated"  // Directory to output generated files
    apiPackage = "com.demo.task.api"  // API package name
   modelPackage = "com.demo.task.model"  // Model package name
   configOptions = [
       sourceFolder: "swagger",  // Folder for sources
        java8: "true",  // Java 8 compatibility
        interfaceOnly: "false",  // Generate only interfaces, not implementation
        useBeanValidation: "true"  // Enable Bean Validation annotations
    ]
    validateSpec = false 
}






tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.annotationProcessorPath = configurations.annotationProcessor
}



